syntax = "proto2";

// Encodes the intent semantics of some input text. Semantics are modeled as a
// syntax parse over the set of types defined here. All unparsed input is
// skipped in the output, so the parse only contains relations over these types.
// Pipeline:
// 1. Email text blob -> Action email classifier -> Y/N (is input email actionable?) 
// 2. Email text blob -> Chunker -> Email sentences
// ------- THIS IS WHERE THIS SERVICE BEGINS -------
// 3. Sentence -> Intent parser -> Intent parse tree (unstructured sentence -> structured parse)
// ------- THIS IS WHERE THIS SERVICE ENDS -------
// 4. Email's intent parse trees -> Serializer -> Write email/intents to disk (db)
//
// Training pipeline:
// 1. Define parse semantics using this proto's Semantics class.
// 2. Unlabeled data set -> labeler.py -> Labeled data set
// 3. Labeled data set -> training_generator.py -> Training/Testing set split (TODO)
// 4. Training set -> model_generator.py -> Language model
//
// Runtime pipeline:
// 1. HTTP server listens for inbound requests.
// 2. Language model, Input text -> parser.py -> Syntax parse protobuf
// 3. Reply with Parse tree protobuf over HTTP

// Request payload.
message InputText {
    optional string text = 1;
}

// Defines a single token.
message ParsedToken {
    // Entities the parser can bind tokens to.
    enum E {
        NOISE = 1;
        ROOT = 2;
        PLACE = 3;
        QUALITY = 4;
        ATTRIBUTE = 5;
        TIME = 6;
        LOCATION = 7;
    }
    optional string token = 1;
    optional E type = 2;
    repeated ParsedToken children = 3;
}

// Response payload.
message ParseTree {
    optional ParsedToken root = 1;
}
